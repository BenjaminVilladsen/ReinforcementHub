<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//Channels for the agent to emit
broadcast chan left, right, main, free;

//Engine statuses
bool main_on=false, left_on=false, right_on=false;

double frames = 0;
double seconds = 0.0;

//Constants
const double GRAVITY = -10.0;
const double PI = 3.1415;
const double MAIN_ENGINE_POWER = 13.0;
const double SIDE_ENGINE_POWER = 0.6; //0.6
const double MASS = 1;
const double MOI = (1.0/6.0) * MASS * (34*34); //We calculate MOI of a square with sides the length of the bottom of the lander.
const double GROUND_LEVEL = 0;

const double APS = 50;

//Side engines
const double SIDE_ENGINE_HEIGHT = 14;

//Thresholds
const double X_POS_MIN = 0;
const double X_POS_MAX = 75;
const double Y_POS_MIN = 0;
const double Y_POS_MAX = 75;
const double X_VEL_MAX = 10;
const double X_VEL_MIN = -10;
const double Y_VEL_MAX = 10;
const double Y_VEL_MIN = -1000;
const double MIN_ANGLE = -2*PI;
const double MAX_ANGLE = 2*PI;
const double ANG_VEL_MIN = -5;
const double ANG_VEL_MAX = 5;

///Lander properties_______________________________________________________
clock lander_pos_x=37.5, lander_pos_y=30, lander_vel_x=0, lander_vel_y=0, lander_angle=0, lander_angle_vel=0;
int touch;

const double LANDER_POLY[14][2] = {
    //Lander body
    {-14,  17},
    {-17,   0},
    {-17, -10},
    { 17, -10},
    { 17,   0},
    { 14,  17},

    //Left leg
    {-21.16, - 1.55}, //TL
    {-17.22, - 2.24}, //TR
    {-23.94, -17.31}, //BL
    {-20.00,  -18.00}, //BR

    //Right leg
    {17.22, -2.24},
    {21.16, -1.55},
    {20.00,-18.00},
    {23.94, -17.31}
};


///State handling_______________________________________________________
double globalState[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void update_state() {
    globalState[0] = lander_pos_x;
    globalState[1] = lander_pos_y;
    globalState[2] = lander_vel_x;
    globalState[3] = lander_vel_y;
    globalState[4] = lander_angle;
    globalState[5] = lander_angle_vel;
    globalState[6] = touch == 2 || touch == 3;
    globalState[7] = touch == 1 || touch == 3;
}

///Reward handling_______________________________________________________
clock cost_shape;

double cost_maerke() {
    double a = 100 * sqrt(globalState[0] * globalState[0] + globalState[1] * globalState[1]);
    double b = 100 * sqrt(globalState[2]/APS * globalState[2]/APS + globalState[3]/APS * globalState[3]/APS);
    double c = 100 * fabs(globalState[4]);
    double d = -500 * globalState[6];
    double e = -500 * globalState[7]; 
    return a + b + c + d + e;
}

///Helper functions_______________________________________________________
//Min function
double min(double a, double b){
    return a &lt; b? a : b;
}

//Max function
double max(double a, double b){
    return a &gt; b? a : b;
}

//Clip function
double clip(double val, double min_val, double max_val) {
    return max(min_val, min(max_val, val));
}

//Clip all function
void clip_all() {
    lander_pos_x = clip(lander_pos_x, X_POS_MIN, X_POS_MAX);
    lander_pos_y = clip(lander_pos_y, Y_POS_MIN, Y_POS_MAX);
    lander_vel_x = clip(lander_vel_x, X_VEL_MIN, X_VEL_MAX);
    lander_vel_y = clip(lander_vel_y, Y_VEL_MIN, Y_VEL_MAX);
    lander_angle = clip(lander_angle, MIN_ANGLE, MAX_ANGLE);
    lander_angle_vel = clip(lander_angle_vel, ANG_VEL_MIN, ANG_VEL_MAX);
}


///Various functions_______________________________________________________
//Function for clipping all values
void flying() {
    clip_all();
    update_state();
    if(left_on){
        lander_angle_vel = lander_angle_vel + SIDE_ENGINE_POWER * SIDE_ENGINE_HEIGHT / MOI;
}
    if(right_on){
        lander_angle_vel = lander_angle_vel - SIDE_ENGINE_POWER * SIDE_ENGINE_HEIGHT / MOI;
}
}

//Function for activating a specific engine
void activate_engine(int engine) {
    if (engine == 1) {
        main_on = true;
        left_on = false;
        right_on = false;
    } 
    else if (engine == 2) {
        main_on = false;
        left_on = true;
        right_on = false;
    } 
    else if (engine == 3) {
        main_on = false;
        left_on = false;
        right_on = true;
    } 
    else {
        main_on = false;
        left_on = false;
        right_on = false;
    }
}

// Function to check leg and body contact with the ground
int check_ground_contact() {
    bool left_leg_contact = false;
    bool right_leg_contact = false;
    bool body_contact = false;

    double rx, ry; // Variables to hold rotated coordinates
    int i;

    // Check contact for the body
    for (i = 0; i &lt; 6; i++) {
        rx = cos(lander_angle) * LANDER_POLY[i][0] - sin(lander_angle) * LANDER_POLY[i][1] + lander_pos_x;
        ry = sin(lander_angle) * LANDER_POLY[i][0] + cos(lander_angle) * LANDER_POLY[i][1] + lander_pos_y;

        if (ry &lt;= GROUND_LEVEL) {
            body_contact = true;
        }
    }

    // Check contact for the left leg if no body contact
    if (!body_contact) {
        for (i = 6; i &lt;= 9; i++) {
            rx = cos(lander_angle) * LANDER_POLY[i][0] - sin(lander_angle) * LANDER_POLY[i][1] + lander_pos_x;
            ry = sin(lander_angle) * LANDER_POLY[i][0] + cos(lander_angle) * LANDER_POLY[i][1] + lander_pos_y;

            if (ry &lt;= GROUND_LEVEL) {
                left_leg_contact = true;
            }
        }
    }

    // Check contact for the right leg if no body contact
    if (!body_contact) {
        for (i = 10; i &lt;= 13; i++) {
            rx = cos(lander_angle) * LANDER_POLY[i][0] - sin(lander_angle) * LANDER_POLY[i][1] + lander_pos_x;
            ry = sin(lander_angle) * LANDER_POLY[i][0] + cos(lander_angle) * LANDER_POLY[i][1] + lander_pos_y;

            if (ry &lt;= GROUND_LEVEL) {
                right_leg_contact = true;
            }
        }
    }

    // Determine the result based on which parts are contacting
    if (body_contact) {
        return 4; // Body is touching
    } else if (left_leg_contact &amp;&amp; right_leg_contact) {
        return 3; // Both legs are touching
    } else if (left_leg_contact) {
        return 2; // Only left leg is touching
    } else if (right_leg_contact) {
        return 1; // Only right leg is touching
    }

    return 0; // No parts are touching
}

///Acceleration and velocities_______________________________________________________
double x_acc() {
    if (lander_vel_x &lt;= X_VEL_MIN || lander_vel_x &gt;= X_VEL_MAX)
        return 0;

    if (main_on) {
        return MAIN_ENGINE_POWER * sin(lander_angle) / MASS;
    }
    
    if (left_on) {
        return SIDE_ENGINE_POWER * cos(lander_angle) / MASS;
    }
    if (right_on) {
        return -SIDE_ENGINE_POWER * cos(lander_angle) / MASS;
    }

    return 0;
}

double y_acc() {
    if (lander_vel_y &lt;= Y_VEL_MIN)
        return 0;

    if (lander_vel_y &gt;= Y_VEL_MAX)
        return 0;

    return GRAVITY + (main_on * MAIN_ENGINE_POWER * cos(lander_angle) / MASS) + (left_on * (SIDE_ENGINE_POWER * (lander_angle &gt; 0 ? -1 : 1)) * cos(lander_angle) / MASS) + (right_on * (SIDE_ENGINE_POWER * (lander_angle &gt; 0 ? 1 : -1)) * cos(lander_angle) / MASS);    
}


double ang_acc() {
      return 0;
    if (lander_angle_vel &lt; ANG_VEL_MIN)
        return 0;

    if (lander_angle_vel &gt; ANG_VEL_MAX)
        return 0;

    if (left_on)
        return -SIDE_ENGINE_POWER * SIDE_ENGINE_HEIGHT / MOI;

    if (right_on)
        return SIDE_ENGINE_POWER * SIDE_ENGINE_HEIGHT / MOI;

    return 0;
}

double calc_terminal_cost(){
    if (touch == 1 || touch == 2){
        if(lander_angle &gt; -0.2 &amp;&amp; lander_angle &lt; 0.2){
            return cost_shape = cost_shape - 5000;
        }
        return cost_shape = cost_shape + 5000;
    }
    if (touch == 3){
        return cost_shape = cost_shape - 5000;
    }
    return cost_shape = cost_shape + 5000;    
}

double y_vel() {
    if (lander_pos_y &lt; Y_POS_MIN)
        return 0;
    
    if (lander_pos_y &gt; Y_POS_MAX)
        return 0;

    return lander_vel_y;
}

double x_vel() {
    if (lander_pos_x &lt; X_POS_MIN)
        return 0;
    
    if (lander_pos_x &gt; X_POS_MAX)
        return 0;

    return lander_vel_x;
}

double ang_vel() {
    if (lander_angle &lt; MIN_ANGLE)
        return 0;
    
    if (lander_angle &gt; MAX_ANGLE)
        return 0;

    return lander_angle_vel;
}

double get_positive_or_negative_random(){
    return random(1) &gt; 0.5 ? -1 : 1;
}

void init_lander_vel(){
    double random_x_vel = random(X_VEL_MAX/2) * get_positive_or_negative_random();
    double random_y_vel = random(Y_VEL_MAX/2) * get_positive_or_negative_random();
    double random_angle = random(MAX_ANGLE/4) * get_positive_or_negative_random();
    double random_angle_vel = random(ANG_VEL_MAX/4) * get_positive_or_negative_random(); 
      
    lander_angle_vel = random_angle_vel;
    lander_angle = random_angle;
    lander_vel_x = random_x_vel;
    lander_vel_y = random_y_vel;

    globalState[2] = random_x_vel;
    globalState[3] = random_y_vel;
    globalState[4] = random_angle;
    globalState[5] = random_angle_vel;
}


</declaration>
	<template>
		<name x="5" y="5">Agent</name>
		<declaration>//Clock for agent
clock t;</declaration>
		<location id="id0" x="-297" y="0">
			<name x="-331" y="-34">A</name>
			<label kind="invariant" x="-374" y="8">t&lt;=1 &amp;&amp;
t'==50</label>
		</location>
		<location id="id1" x="204" y="0">
			<name x="212" y="-25">B</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-68" y="68">left!</label>
			<nail x="-51" y="102"/>
		</transition>
		<transition id="id3">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-68" y="136">right!</label>
			<nail x="204" y="68"/>
			<nail x="-51" y="170"/>
			<nail x="-297" y="76"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-68" y="-187">main!</label>
			<nail x="204" y="-68"/>
			<nail x="-51" y="-170"/>
			<nail x="-297" y="-59"/>
		</transition>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-68" y="-119">free!</label>
			<nail x="-51" y="-102"/>
		</transition>
		<transition id="id6" controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-93" y="0">t==1</label>
			<label kind="assignment" x="-51" y="-25">t = 0.0,
frames = frames+1,
seconds = frames/50</label>
		</transition>
	</template>
	<template>
		<name>LunarLander</name>
		<location id="id7" x="-1002" y="841">
			<name x="-1020" y="807">Init</name>
			<committed/>
		</location>
		<location id="id8" x="-603" y="841">
			<name x="-577" y="833">Flying1</name>
			<label kind="invariant" x="-722" y="858">lander_vel_x' == x_acc() &amp;&amp;
lander_vel_y' == y_acc() &amp;&amp;
lander_angle_vel' == ang_acc() &amp;&amp;
lander_pos_x' == x_vel() &amp;&amp;
lander_pos_y' == y_vel() &amp;&amp;
lander_angle' == ang_vel() &amp;&amp;
cost_shape' == cost_maerke()</label>
		</location>
		<location id="id9" x="-603" y="501">
			<name x="-577" y="484">Flying2</name>
			<committed/>
		</location>
		<location id="id10" x="-603" y="306">
			<name x="-578" y="298">Ground</name>
			<label kind="invariant" x="-824" y="323">lander_vel_x' == 0 &amp;&amp;
lander_vel_y' == 0 &amp;&amp;
lander_angle_vel' == 0 &amp;&amp;
lander_pos_x' == 0 &amp;&amp;
lander_pos_y' == 0 &amp;&amp;
lander_angle' == 0</label>
			<committed/>
		</location>
		<location id="id11" x="-731" y="161">
			<name x="-714" y="153">Left</name>
			<committed/>
		</location>
		<location id="id12" x="-646" y="161">
			<name x="-629" y="153">Right</name>
			<committed/>
		</location>
		<location id="id13" x="-561" y="161">
			<name x="-544" y="153">Both</name>
			<committed/>
		</location>
		<location id="id14" x="-476" y="161">
			<name x="-450" y="153">Body</name>
			<committed/>
		</location>
		<location id="id15" x="-603" y="34">
			<name x="-637" y="0">Terminated</name>
			<label kind="invariant" x="-348" y="144">cost_shape' == 0 &amp;&amp;
lander_vel_x' == 0 &amp;&amp;
lander_vel_y' == 0 &amp;&amp;
lander_angle_vel' == 0 &amp;&amp;
lander_pos_x' == 0 &amp;&amp;
lander_pos_y' == 0 &amp;&amp;
lander_angle' == 0</label>
		</location>
		<init ref="id7"/>
		<transition id="id16" controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="assignment" x="-535" y="76">cost_shape = calc_terminal_cost()</label>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="assignment" x="-518" y="93">cost_shape = calc_terminal_cost()</label>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="assignment" x="-977" y="85">cost_shape = calc_terminal_cost()</label>
		</transition>
		<transition id="id19" controllable="false">
			<source ref="id12"/>
			<target ref="id15"/>
			<label kind="assignment" x="-909" y="68">cost_shape = calc_terminal_cost()</label>
		</transition>
		<transition id="id20">
			<source ref="id10"/>
			<target ref="id14"/>
			<label kind="guard" x="-459" y="127">touch == 4</label>
		</transition>
		<transition id="id21">
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="-586" y="178">touch == 3</label>
		</transition>
		<transition id="id22">
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-680" y="178">touch == 1</label>
		</transition>
		<transition id="id23">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-824" y="178">touch == 2</label>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="select" x="-586" y="357">e: int[1,4]</label>
			<label kind="guard" x="-586" y="374">check_ground_contact() == e</label>
			<label kind="assignment" x="-586" y="391">touch = e,
update_state()</label>
		</transition>
		<transition id="id25">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-382" y="595">free?</label>
			<label kind="assignment" x="-382" y="612">activate_engine(0)</label>
			<nail x="-390" y="790"/>
			<nail x="-390" y="544"/>
		</transition>
		<transition id="id26">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-467" y="595">main?</label>
			<label kind="assignment" x="-577" y="612">activate_engine(1)</label>
			<nail x="-416" y="773"/>
			<nail x="-416" y="561"/>
		</transition>
		<transition id="id27">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-883" y="595">right?</label>
			<label kind="assignment" x="-986" y="612">activate_engine(3)</label>
			<nail x="-824" y="799"/>
			<nail x="-824" y="544"/>
		</transition>
		<transition id="id28">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-790" y="595">left?</label>
			<label kind="assignment" x="-790" y="612">activate_engine(2)</label>
			<nail x="-798" y="782"/>
			<nail x="-798" y="561"/>
		</transition>
		<transition id="id29">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="assignment" x="-629" y="671">flying()</label>
		</transition>
		<transition id="id30" controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-984" y="841">init_lander_vel()</label>
		</transition>
	</template>
	<system>system Agent, LunarLander;
</system>
	<queries>
		<option key="--learning-method" value="4"/>
		<option key="--hashtable-size" value="32"/>
		<query>
			<formula>strategy win = minE(cost_shape)[&lt;=2000] {} -&gt; {main_on, left_on, right_on, lander_pos_x, cost_shape, lander_pos_y, lander_vel_x, lander_vel_y, lander_angle, lander_angle_vel, touch, globalState[0], globalState[1],globalState[2],globalState[3],globalState[4],globalState[5]}: &lt;&gt; LunarLander.Terminated</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 11:07:23 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--learning-method" value="4"/>
			</result>
		</query>
		<query>
			<formula>E[&lt;=400;400] (max: cost_shape) under win</formula>
			<comment/>
			<result outcome="success" type="quantity" value="9255.1 ± 265.342 (95% CI)" timestamp="2024-05-17 11:12:35 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--learning-method" value="4"/>
				<details>9255.1 ± 265.342 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: cost_shape" yaxis="probability density">
					<series title="density" type="b(772.386596)" color="0x0000ff" encoding="csv">4536.19869855605,1.6183605547476817E-5
5308.585294567028,1.0681179661334699E-4
6080.971890578006,1.9743998767921716E-4
6853.358486588984,1.1975868105132844E-4
7625.745082599962,9.386491217536554E-5
8398.13167861094,1.4565244992729135E-4
9170.518274621918,1.6183605547476817E-4
9942.904870632898,9.71016332848609E-5
10715.291466643874,9.062819106587017E-5
11487.678062654853,7.444458551839335E-5
12260.06465866583,5.502425886142118E-5
13032.45125467681,4.5314095532935085E-5
13804.837850687789,4.855081664243045E-5
14577.224446698765,2.5893768875962905E-5
15349.611042709745,3.236721109495363E-6
16121.99763872072,3.236721109495363E-6
16894.3842347317,3.236721109495363E-6
17666.770830742676,3.236721109495363E-6
18439.157426753656,0.0
19211.544022764632,3.236721109495363E-6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9255.10456964519,0.0
9255.10456964519,1.9743998767921716E-4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=772.39, bucket count=20
Runs: 400 in total, 400 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [4536.2, 19984]
Mean estimate of displayed sample: 9255.1 ± 265.34 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: cost_shape" yaxis="probability">
					<series title="probability" type="b(772.386596)" color="0x0000ff" encoding="csv">4536.19869855605,0.0125
5308.585294567028,0.0825
6080.971890578006,0.1525
6853.358486588984,0.0925
7625.745082599962,0.0725
8398.13167861094,0.1125
9170.518274621918,0.125
9942.904870632898,0.075
10715.291466643874,0.07
11487.678062654853,0.0575
12260.06465866583,0.0425
13032.45125467681,0.035
13804.837850687789,0.0375
14577.224446698765,0.02
15349.611042709745,0.0025
16121.99763872072,0.0025
16894.3842347317,0.0025
17666.770830742676,0.0025
18439.157426753656,0.0
19211.544022764632,0.0025
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9255.10456964519,0.0
9255.10456964519,0.1525
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=772.39, bucket count=20
Runs: 400 in total, 400 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [4536.2, 19984]
Mean estimate of displayed sample: 9255.1 ± 265.34 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: cost_shape" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">4536.19869855605,0.0
5308.585294567028,0.0125
6080.971890578006,0.095
6853.358486588984,0.2475
7625.745082599962,0.34
8398.13167861094,0.4125
9170.518274621918,0.525
9942.904870632898,0.65
10715.291466643874,0.725
11487.678062654853,0.795
12260.06465866583,0.8525
13032.45125467681,0.895
13804.837850687789,0.93
14577.224446698765,0.9675
15349.611042709745,0.9875
16121.99763872072,0.99
16894.3842347317,0.9925
17666.770830742676,0.995
18439.157426753656,0.9975
19211.544022764632,0.9975
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9255.10456964519,0.0
9255.10456964519,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=772.39, bucket count=20
Runs: 400 in total, 400 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [4536.2, 19984]
Mean estimate of displayed sample: 9255.1 ± 265.34 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: cost_shape" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">4536.19869855605,0.009179804583665263
5308.585294567028,0.02892834378528682
6080.971890578006,0.12806064599502015
6853.358486588984,0.29281923696933176
7625.745082599962,0.3887260437155625
8398.13167861094,0.46249292531075165
9170.518274621918,0.5748449488377447
9942.904870632898,0.6967302279946809
10715.291466643874,0.7682017425701302
11487.678062654853,0.8335033013233357
12260.06465866583,0.8857819155110286
13032.45125467681,0.9232714126691961
13804.837850687789,0.952984671599821
14577.224446698765,0.9825838539157878
15349.611042709745,0.9959291641554002
16121.99763872072,0.9972688040287571
16894.3842347317,0.9984506410500943
17666.770830742676,0.9993939021906778
18439.157426753656,0.9999367074830952
19211.544022764632,0.9999367074830952
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">4536.19869855605,0.0
5308.585294567028,0.004070835844599721
6080.971890578006,0.06810671552310077
6853.358486588984,0.20596188087007378
7625.745082599962,0.293662163320844
8398.13167861094,0.3638114835917833
9170.518274621918,0.47478253293699
9942.904870632898,0.6010313375281027
10715.291466643874,0.6784330409165952
11487.678062654853,0.7520681156129536
12260.06465866583,0.8138981567866327
13032.45125467681,0.8607269465681882
13804.837850687789,0.9004174842299392
14577.224446698765,0.9450651832493072
15349.611042709745,0.9710716562147131
16121.99763872072,0.9745951990926638
16894.3842347317,0.9782393314855828
17666.770830742676,0.9820558553944145
18439.157426753656,0.9861502300379867
19211.544022764632,0.9861502300379867
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">4536.19869855605,0.0
5308.585294567028,0.0125
6080.971890578006,0.095
6853.358486588984,0.2475
7625.745082599962,0.34
8398.13167861094,0.4125
9170.518274621918,0.525
9942.904870632898,0.65
10715.291466643874,0.725
11487.678062654853,0.795
12260.06465866583,0.8525
13032.45125467681,0.895
13804.837850687789,0.93
14577.224446698765,0.9675
15349.611042709745,0.9875
16121.99763872072,0.99
16894.3842347317,0.9925
17666.770830742676,0.995
18439.157426753656,0.9975
19211.544022764632,0.9975
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9255.10456964519,0.0
9255.10456964519,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=772.39, bucket count=20
Runs: 400 in total, 400 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [4536.2, 19984]
Mean estimate of displayed sample: 9255.1 ± 265.34 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: cost_shape" yaxis="count">
					<series title="count" type="b(772.386596)" color="0x0000ff" encoding="csv">4536.19869855605,5.0
5308.585294567028,33.0
6080.971890578006,61.0
6853.358486588984,37.0
7625.745082599962,29.0
8398.13167861094,45.0
9170.518274621918,50.0
9942.904870632898,30.0
10715.291466643874,28.0
11487.678062654853,23.0
12260.06465866583,17.0
13032.45125467681,14.0
13804.837850687789,15.0
14577.224446698765,8.0
15349.611042709745,1.0
16121.99763872072,1.0
16894.3842347317,1.0
17666.770830742676,1.0
18439.157426753656,0.0
19211.544022764632,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">9255.10456964519,0.0
9255.10456964519,61.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=772.39, bucket count=20
Runs: 400 in total, 400 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [4536.2, 19984]
Mean estimate of displayed sample: 9255.1 ± 265.34 (95% CI)</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>
